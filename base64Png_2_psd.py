import base64
import numpy as np
import pytoshop

from io import BytesIO
from PIL import Image as plImage
from pytoshop.user.nested_layers import Group, Image
from pytoshop import enums, image_data
from pytoshop.user import nested_layers

if __name__ == '__main__':

	# base64 png to PIL image
	base64ImageData = ""
	decodeBase64 = base64.b64decode(base64ImageData)
	bytesIO = BytesIO(decodeBase64)
	plImageData = plImage.open(bytesIO)

	# PIL image to pytoshop Image data
	convertImage = plImageData.convert("LA")
	img = np.array(convertImage)
	grayImage = np.max(img, axis = 2)

	width = img.shape[1]
	height = img.shape[0]
	alphaImage = np.zeros((height, width), dtype=np.int)
	for widthIndex in range(width-1):
		for heightIndex in range(height-1):
			alphaImage[heightIndex, widthIndex] = img[heightIndex, widthIndex][1]

	alphaImage 	= alphaImage.astype(np.uint8)
	grayImage 	= grayImage.astype(np.uint8)

	images = {
		enums.ColorChannel.red 		: grayImage, 
		enums.ColorChannel.green 	: grayImage, 
		enums.ColorChannel.blue 	: grayImage, 
		enums.ColorChannel.user_layer_mask : alphaImage
	}

	# set pytoshop Image to pytoshop Layers
	imageLayer = Image(
		name 	= 'Image',
		top 	= 0, 
		left 	= 0, 
		bottom	= images[enums.ColorChannel.user_layer_mask].shape[0], 
		right	= images[enums.ColorChannel.user_layer_mask].shape[1],
		color_mode = enums.ColorMode.rgb
	)
	for imageIndex, image in images.items():
		imageLayer.set_channel(imageIndex, image)

	imageLayers = [imageLayer]

	# pytoshop Layers to pytoshop Group
	layerGroups = [ Group(name="layerGroup", layers=imageLayers) ]

	# pytoshop Group to psd data
	psd = nested_layers.nested_layers_to_psd(layerGroups, 
		enums.ColorMode.rgb, 
		depth=enums.ColorDepth.depth8)	

	with open('output.psd', 'wb') as fd:
		psd.write(fd)
